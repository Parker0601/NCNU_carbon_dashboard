{{#> 
    layouts/main 
    title="設備管理" 
    pagename="staff_device"
    heading="設備管理"
    category_1="員工專區"
    pagedescription="即時查看設備狀態並記錄維護日誌"
}}

{{#*inline "head-block"}}
<link rel="stylesheet" media="screen, print" href="css/notifications/sweetalert2/sweetalert2.bundle.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{{/inline}}

{{#*inline "content-block"}}
<!-- 切換按鈕 -->
<div class="d-flex justify-content-between align-items-center mb-3">
  <div>
    <button id="btn-device-view" class="btn btn-outline-primary btn-sm active">設備狀態</button>
    <button id="btn-report-view" class="btn btn-outline-secondary btn-sm">設備報表</button>
  </div>
  <div>
    <button id="btn-refresh" class="btn btn-outline-info btn-sm mr-2">
      <i class="fal fa-sync-alt"></i> 刷新數據
    </button>
    <h4 class="m-0 d-inline">設備資訊</h4>
  </div>
</div>

<!-- 設備卡片視圖 -->
<div id="device-view">
  <div class="row" id="device-list">
    <!-- 設備卡片將由JS動態生成 -->
  </div>
</div>

<!-- 設備報表視圖 -->
<div id="report-view" style="display:none;">
  <div class="row mt-4">
    <div class="col-12">
      <div class="panel">
        <div class="panel-hdr">
          <h2>設備報表</h2>
          <div class="panel-toolbar">
            <select id="report-selector" class="form-control form-control-sm">
              <option value="runtime">運行時數統計</option>
              <option value="status">設備狀態分布</option>
              <option value="maintenance">維護紀錄次數統計</option>
              <option value="prediction">平均運行時間與預測維護</option>
            </select>
          </div>
        </div>
        <div class="panel-container show">
          <div class="panel-content">
            <div id="report-container" style="height: 400px;"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 維護記錄模態框 -->
<div class="modal fade" id="maintenanceModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">設備維護記錄</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="maintenanceForm">
          <div class="form-group">
            <label>設備名稱</label>
            <input type="text" class="form-control" id="deviceName" readonly>
          </div>
          <div class="form-group">
            <label>維護類型</label>
            <select class="form-control" id="maintenanceType" required>
              <option value="">請選擇維護類型</option>
              <option value="routine">例行維護</option>
              <option value="repair">故障維修</option>
              <option value="inspection">設備檢查</option>
            </select>
          </div>
          <div class="form-group">
            <label>維護描述</label>
            <textarea class="form-control" id="maintenanceDescription" rows="3" placeholder="請描述維護內容..." required></textarea>
          </div>
          <div class="form-group">
            <label>維護時間</label>
            <input type="datetime-local" class="form-control" id="maintenanceTime" required>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">取消</button>
        <button type="button" class="btn btn-primary" id="submitMaintenance">提交記錄</button>
      </div>
    </div>
  </div>
</div>
{{/inline}}

{{#*inline "scripts-block"}}
<script src="/js/statistics/easypiechart/easypiechart.bundle.js"></script> 
<script src="js/notifications/sweetalert2/sweetalert2.bundle.js"></script>

<script>
  // API 配置
  const API_BASE_URL = 'http://localhost:3000/api';
  const API_ENDPOINTS = {
    devices: '/devices',
    maintenance: '/maintenance',
    carbon: '/carbon/my-data'
  };

  // 獲取認證token
  function getAuthToken() {
    return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
  }

  // API請求函數
  async function apiRequest(endpoint, options = {}) {
    const token = getAuthToken();
    const defaultOptions = {
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      }
    };

    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        ...defaultOptions,
        ...options
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  // 獲取設備數據
  async function fetchDevices() {
    try {
      // 如果後端API還沒實現，使用模擬數據
      if (!getAuthToken()) {
        return Promise.resolve([
          { id: 1, name: "機台A", status: "normal", last_maintenance: "2024-06-01 10:00", runtime: "1200h" },
          { id: 2, name: "機台B", status: "abnormal", last_maintenance: "2024-05-28 14:30", runtime: "800h" },
          { id: 3, name: "機台C", status: "normal", last_maintenance: "2024-06-05 09:15", runtime: "1500h" }
        ]);
      }

      // 實際API調用
      const response = await apiRequest(API_ENDPOINTS.devices);
      return response.data || [];
    } catch (error) {
      console.error('Failed to fetch devices:', error);
      // 顯示錯誤提示
      Swal.fire({
        icon: 'error',
        title: '獲取設備數據失敗',
        text: '請檢查網絡連接或聯繫管理員'
      });
      return [];
    }
  }

  // 提交維護記錄
  async function submitMaintenanceRecord(data) {
    try {
      const response = await apiRequest(API_ENDPOINTS.maintenance, {
        method: 'POST',
        body: JSON.stringify(data)
      });

      Swal.fire({
        icon: 'success',
        title: '維護記錄提交成功',
        text: '記錄已保存到系統'
      });

      return response;
    } catch (error) {
      console.error('Failed to submit maintenance record:', error);
      Swal.fire({
        icon: 'error',
        title: '提交失敗',
        text: '請檢查網絡連接或聯繫管理員'
      });
      throw error;
    }
  }

  // 獲取碳排放數據（用於設備效率分析）
  async function fetchCarbonData() {
    try {
      if (!getAuthToken()) {
        return [];
      }

      const response = await apiRequest(API_ENDPOINTS.carbon);
      return response.data || [];
    } catch (error) {
      console.error('Failed to fetch carbon data:', error);
      return [];
    }
  }

  function calcRuntimePercent(runtimeStr) {
    const hours = parseInt(runtimeStr, 10) || 0;
    const FULL_LOAD = 2000;
    return Math.min(Math.round(hours / FULL_LOAD * 100), 100);
  }

  function renderDevices(devices) {
    const $list = $('#device-list');
    $list.empty();

    if (devices.length === 0) {
      $list.html('<div class="col-12 text-center"><p class="text-muted">暫無設備數據</p></div>');
      return;
    }

    devices.forEach(device => {
      const statusColor = device.status === 'normal' ? 'bg-success-300' : 'bg-danger-300';
      const statusText  = device.status === 'normal' ? '正常' : '異常';

      const card = `
        <div class="col-md-6 col-xl-4 mb-4">
          <div class="card shadow border-0">
            <div class="card-header d-flex justify-content-between align-items-center ${statusColor}">
              <span class="fw-700 text-white">${device.name}</span>
              <span class="badge ${device.status === 'normal' ? 'badge-success' : 'badge-danger'}">${statusText}</span>
            </div>
            <div class="card-body text-center">
              <div class="js-easy-pie-chart d-inline-flex align-items-center justify-content-center mb-3"
                   data-percent="${calcRuntimePercent(device.runtime)}"
                   data-linewidth="12" data-piesize="120" data-linecap="butt">
                <span class="h4 m-0 fw-700"></span>
              </div>
              <p class="mb-2"><strong>運行時間：</strong>${device.runtime}</p>
              <p class="mb-2"><strong>最後維護：</strong>${device.last_maintenance}</p>
              <div class="mt-3">
                <button class="btn btn-primary btn-sm btn-maintain" 
                        data-id="${device.id}" 
                        data-name="${device.name}">
                  <i class="fal fa-tools"></i> 記錄維護
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      $list.append(card);
    });

    // 重新初始化圖表
    $('.js-easy-pie-chart').each(function() {
      $(this).easyPieChart({
        barColor: $(this).data('barcolor') || '#1dc9b7',
        trackColor: $(this).data('trackcolor') || '#e9ecef',
        scaleColor: false,
        lineCap: $(this).data('linecap') || 'butt',
        lineWidth: $(this).data('linewidth') || 3,
        size: $(this).data('piesize') || 110,
        animate: 1000
      });
    });
  }

  function showMaintenanceForm(deviceId, deviceName) {
    $('#deviceName').val(deviceName);
    $('#maintenanceTime').val(new Date().toISOString().slice(0, 16));
    $('#maintenanceForm')[0].reset();
    $('#maintenanceModal').modal('show');
  }

  function renderReport(type) {
    const $container = $('#report-container');
    $container.empty();

    switch (type) {
      case 'runtime':
        const runtimeData = [
          { name: '機台A', runtime: 1200 },
          { name: '機台B', runtime: 800 },
          { name: '機台C', runtime: 1500 }
        ];
        const canvas1 = document.createElement('canvas');
        $container.append(canvas1);
        new Chart(canvas1, {
          type: 'bar',
          data: {
            labels: runtimeData.map(d => d.name),
            datasets: [{
              label: '運行時數',
              data: runtimeData.map(d => d.runtime),
              backgroundColor: 'rgba(54, 162, 235, 0.6)'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: { display: true, text: '設備運行時數統計' }
            }
          }
        });
        break;

      case 'status':
        const statusData = [
          { status: '正常', count: 2 },
          { status: '異常', count: 1 }
        ];
        const canvas2 = document.createElement('canvas');
        $container.append(canvas2);
        new Chart(canvas2, {
          type: 'pie',
          data: {
            labels: statusData.map(d => d.status),
            datasets: [{
              data: statusData.map(d => d.count),
              backgroundColor: ['#1dc9b7', '#fd3995']
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: { display: true, text: '設備狀態分布' }
            }
          }
        });
        break;

      case 'maintenance':
        const maintenanceData = [
          { name: '機台A', count: 3 },
          { name: '機台B', count: 5 },
          { name: '機台C', count: 2 }
        ];
        const canvas3 = document.createElement('canvas');
        $container.append(canvas3);
        new Chart(canvas3, {
          type: 'bar',
          data: {
            labels: maintenanceData.map(d => d.name),
            datasets: [{
              label: '維護次數',
              data: maintenanceData.map(d => d.count),
              backgroundColor: 'rgba(255, 159, 64, 0.6)'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: { display: true, text: '各設備維護次數' }
            }
          }
        });
        break;

      case 'prediction':
        const pred = [
          { name: '機台A', runtime: 1200, last_maintenance: '2024-06-01 10:00' },
          { name: '機台B', runtime: 800, last_maintenance: '2024-05-28 14:30' },
          { name: '機台C', runtime: 1900, last_maintenance: '2024-06-05 09:15' }
        ];
        const predHtml = pred.map(d => {
          const warn = d.runtime > 1800 ? '⚠️ 請安排維護' : '';
          return `<div class="mb-2"><strong>${d.name}</strong>: ${d.runtime} 小時 (最後維護: ${d.last_maintenance}) ${warn}</div>`;
        }).join('');
        $container.html(predHtml);
        break;
    }
  }

  $(document).ready(function () {
    // 初始載入
    loadDeviceData();
    renderReport('runtime');

    // 刷新按鈕
    $('#btn-refresh').on('click', function() {
      loadDeviceData();
    });

    // 切換視圖
    $('#btn-device-view').on('click', function () {
      $(this).addClass('active');
      $('#btn-report-view').removeClass('active');
      $('#device-view').show();
      $('#report-view').hide();
    });

    $('#btn-report-view').on('click', function () {
      $(this).addClass('active');
      $('#btn-device-view').removeClass('active');
      $('#device-view').hide();
      $('#report-view').show();
      renderReport($('#report-selector').val());
    });

    // 報表下拉變更
    $('#report-selector').on('change', function () {
      renderReport($(this).val());
    });

    // 維護按鈕事件
    $(document).on('click', '.btn-maintain', function () {
      const deviceId = $(this).data('id');
      const deviceName = $(this).data('name');
      showMaintenanceForm(deviceId, deviceName);
    });

    // 提交維護記錄
    $('#submitMaintenance').on('click', async function() {
      const form = $('#maintenanceForm')[0];
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const maintenanceData = {
        deviceId: $('#deviceName').val(),
        type: $('#maintenanceType').val(),
        description: $('#maintenanceDescription').val(),
        maintenanceTime: $('#maintenanceTime').val(),
        userId: localStorage.getItem('userID') || 'unknown'
      };

      try {
        await submitMaintenanceRecord(maintenanceData);
        $('#maintenanceModal').modal('hide');
        // 重新載入設備數據
        loadDeviceData();
      } catch (error) {
        console.error('Failed to submit maintenance record:', error);
      }
    });
  });

  // 載入設備數據
  async function loadDeviceData() {
    try {
      const devices = await fetchDevices();
      renderDevices(devices);
    } catch (error) {
      console.error('Failed to load device data:', error);
    }
  }
</script>
{{/inline}}

{{/layouts/main}}
